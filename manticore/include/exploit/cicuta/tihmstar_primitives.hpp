//
//  tihmstar_primitives.h
//  manticore
//
//  Created by Luca on 12.03.21.
//

#ifndef tihmstar_primitives_h
#define tihmstar_primitives_h

#include <stdio.h>
#include <mach/mach.h>
#include <stdint.h>
#include <mach/mach.h>


#ifdef __cplusplus
extern "C" {
#endif

class KernelRW{
public:
    struct patch{
        uint64_t where;
        uint64_t what;
    };
private:
    uint64_t _kernel_base;
    uint64_t _mach_task_self_addr;
    mach_port_t _IOSurfaceRoot;
    mach_port_t _IOSurfaceRootUserClient;
    mach_port_t _context_read_port;
    mach_port_t _context_write_port;

    uint32_t _IOSurface_id_write;

    uint64_t _context_write_context_addr;
    patch _backup;

    std::mutex _rw_lock;
public:
    KernelRW();
    ~KernelRW();
    void setKernelBase(uint64_t kernel_base) {_kernel_base = kernel_base;}
    uint64_t getKernelBase() {return _kernel_base;};

    patch getPrimitivepatches(std::function<uint64_t(uint64_t)> kread64, uint64_t machTaskSelfAddr); //no kernel RW
    void handoffPrimitivePatching(mach_port_t transmissionPort); //no kernel RW

    void doRemotePrimitivePatching(mach_port_t transmissionPort, uint64_t dstTaskAddr); //requires kernel RW

    uint32_t kread32(uint64_t where);
    uint64_t kread64(uint64_t where);
    void kwrite32(uint64_t where, uint32_t what);
    void kwrite64(uint64_t where, uint64_t what);

    size_t kreadbuf(uint64_t where, void *p, size_t size);
    size_t kwritebuf(uint64_t where, const void *p, size_t size);

    unsigned long kstrlen(uint64_t where);

    uint64_t getKobjAddrForPort(mach_port_t port);
};


void initKernRw(mach_port_t dstTask, uint64_t dstTaskAddr, uint64_t (*kread64)(uint64_t addr), void (*write_20)(uint64_t addr, const void *buf));

#ifdef __cplusplus
}
#endif

#endif /* tihmstar_primitives_h */
